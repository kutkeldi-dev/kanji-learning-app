// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞–Ω–∏–π –∫–∞–Ω–¥–∑–∏

class KanjiTest {
    constructor(app) {
        this.app = app;
        this.currentTest = null;
        this.currentQuestionIndex = 0;
        this.questions = [];
        this.answers = [];
        this.testSettings = {
            questionCount: 10,
            testType: 'meaning', // meaning, reading, mixed
            weekFilter: 'all',
            dayFilter: 'all'
        };
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    init() {
        if (!this.app.api.isDataLoaded()) {
            console.warn('–î–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∑–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            return;
        }

        this.bindEvents();
        this.setupTestInterface();
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    bindEvents() {
        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        window.startTest = () => this.startTest();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∞
        document.addEventListener('keydown', (e) => {
            if (this.currentTest && document.getElementById('test-question').style.display !== 'none') {
                if (e.key >= '1' && e.key <= '4') {
                    const optionIndex = parseInt(e.key) - 1;
                    this.selectAnswer(optionIndex);
                } else if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    this.nextQuestion();
                } else if (e.key === 'Escape') {
                    this.endTest();
                }
            }
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç–µ—Å—Ç–∞
     */
    setupTestInterface() {
        const settingsDiv = document.getElementById('test-settings');
        if (settingsDiv) {
            // –°–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞
            this.createTestSettings(settingsDiv);
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞
     * @param {HTMLElement} container - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    createTestSettings(container) {
        const existingButton = container.querySelector('button');
        if (existingButton) {
            existingButton.remove();
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        const questionCountDiv = DOMHelpers.createElement('div', 'test-setting');
        const questionCountLabel = DOMHelpers.createElement('label', '', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:');
        const questionCountSelect = DOMHelpers.createElement('select', 'test-question-count');
        questionCountSelect.id = 'test-question-count';

        [5, 10, 15, 20, 25, 30].forEach(count => {
            const option = DOMHelpers.createElement('option', '', count.toString());
            option.value = count;
            if (count === this.testSettings.questionCount) {
                option.selected = true;
            }
            questionCountSelect.appendChild(option);
        });

        questionCountSelect.addEventListener('change', (e) => {
            this.testSettings.questionCount = parseInt(e.target.value);
        });

        questionCountDiv.appendChild(questionCountLabel);
        questionCountDiv.appendChild(questionCountSelect);

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
        const testTypeDiv = DOMHelpers.createElement('div', 'test-setting');
        const testTypeLabel = DOMHelpers.createElement('label', '', '–¢–∏–ø —Ç–µ—Å—Ç–∞:');
        const testTypeSelect = DOMHelpers.createElement('select', 'test-type-select');
        testTypeSelect.id = 'test-type-select';

        const testTypes = [
            { value: 'meaning', text: '–£–≥–∞–¥–∞–π –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–Ω–¥–∑–∏' },
            { value: 'reading', text: '–£–≥–∞–¥–∞–π —á—Ç–µ–Ω–∏–µ –∫–∞–Ω–¥–∑–∏' },
            { value: 'mixed', text: '–°–º–µ—à–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç' }
        ];

        testTypes.forEach(type => {
            const option = DOMHelpers.createElement('option', '', type.text);
            option.value = type.value;
            if (type.value === this.testSettings.testType) {
                option.selected = true;
            }
            testTypeSelect.appendChild(option);
        });

        testTypeSelect.addEventListener('change', (e) => {
            this.testSettings.testType = e.target.value;
        });

        testTypeDiv.appendChild(testTypeLabel);
        testTypeDiv.appendChild(testTypeSelect);

        // –§–∏–ª—å—Ç—Ä—ã –ø–æ –Ω–µ–¥–µ–ª—è–º –∏ –¥–Ω—è–º
        const weekFilterDiv = DOMHelpers.createElement('div', 'test-setting');
        const weekFilterLabel = DOMHelpers.createElement('label', '', '–ù–µ–¥–µ–ª—è:');
        const weekFilterSelect = DOMHelpers.createElement('select', 'test-week-filter');
        
        const weekOptions = [
            { value: 'all', text: '–í—Å–µ –Ω–µ–¥–µ–ª–∏' },
            { value: '1', text: '–ù–µ–¥–µ–ª—è 1' },
            { value: '2', text: '–ù–µ–¥–µ–ª—è 2' },
            { value: '3', text: '–ù–µ–¥–µ–ª—è 3' },
            { value: '4', text: '–ù–µ–¥–µ–ª—è 4' },
            { value: '5', text: '–ù–µ–¥–µ–ª—è 5' },
            { value: '6', text: '–ù–µ–¥–µ–ª—è 6' }
        ];

        weekOptions.forEach(week => {
            const option = DOMHelpers.createElement('option', '', week.text);
            option.value = week.value;
            weekFilterSelect.appendChild(option);
        });

        weekFilterSelect.addEventListener('change', (e) => {
            this.testSettings.weekFilter = e.target.value;
        });

        weekFilterDiv.appendChild(weekFilterLabel);
        weekFilterDiv.appendChild(weekFilterSelect);

        // –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
        const startButton = DOMHelpers.createElement('button', 'control-btn test-start-btn', 'üß† –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç');
        startButton.style.fontSize = '1.2rem';
        startButton.style.padding = '15px 30px';
        startButton.style.marginTop = '20px';
        startButton.onclick = () => this.startTest();

        // –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const settingsContainer = DOMHelpers.createElement('div', 'test-settings-container');
        settingsContainer.appendChild(questionCountDiv);
        settingsContainer.appendChild(testTypeDiv);
        settingsContainer.appendChild(weekFilterDiv);
        settingsContainer.appendChild(startButton);

        container.appendChild(settingsContainer);
    }

    /**
     * –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç
     */
    startTest() {
        try {
            console.log('–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç...');
            
            // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            NotificationHelpers.show('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–∞...', 'info');
            
            // –ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–¥–∑–∏ –¥–ª—è —Ç–µ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            const availableKanji = this.getFilteredKanji();
            console.log(`–î–æ—Å—Ç—É–ø–Ω–æ –∫–∞–Ω–¥–∑–∏ –¥–ª—è —Ç–µ—Å—Ç–∞: ${availableKanji.length}`);
            
            if (availableKanji.length < 4) {
                NotificationHelpers.show('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–Ω–¥–∑–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ (–º–∏–Ω–∏–º—É–º 4)', 'error');
                return;
            }

            // –°–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º setTimeout –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ UI
            setTimeout(() => {
                try {
                    console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã...');
                    this.questions = this.generateQuestions(availableKanji);
                    
                    if (this.questions.length === 0) {
                        NotificationHelpers.show('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞', 'error');
                        return;
                    }
                    
                    console.log(`–°–æ–∑–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${this.questions.length}`);
                    
                    this.answers = [];
                    this.currentQuestionIndex = 0;
                    this.currentTest = {
                        startTime: Date.now(),
                        settings: { ...this.testSettings }
                    };

                    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
                    this.showQuestion();
                    
                    // –°–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Å—Ç
                    document.getElementById('test-settings').style.display = 'none';
                    document.getElementById('test-question').style.display = 'block';
                    document.getElementById('test-results').style.display = 'none';

                    NotificationHelpers.show('–¢–µ—Å—Ç –Ω–∞—á–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏—à–∏ 1-4 –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞', 'success');
                    
                } catch (innerError) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:', innerError);
                    NotificationHelpers.show('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ—Å—Ç–∞', 'error');
                }
            }, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞:', error);
            NotificationHelpers.show('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞: ' + error.message, 'error');
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∑–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –∫–∞–Ω–¥–∑–∏
     */
    getFilteredKanji() {
        return this.app.api.filterKanji(this.testSettings.weekFilter, this.testSettings.dayFilter);
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞
     * @param {Array} availableKanji - –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–¥–∑–∏
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
     */
    generateQuestions(availableKanji) {
        const questions = [];
        const usedKanji = new Set();
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–∞–Ω–¥–∑–∏
        const maxQuestions = Math.min(this.testSettings.questionCount, availableKanji.length);
        
        for (let i = 0; i < maxQuestions; i++) {
            // –í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∫–∞–Ω–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–π –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
            let randomKanji;
            let attempts = 0;
            const maxAttempts = availableKanji.length * 2;
            
            do {
                randomKanji = availableKanji[Math.floor(Math.random() * availableKanji.length)];
                attempts++;
                
                // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                if (attempts >= maxAttempts) {
                    console.warn('–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–∏—Å–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–¥–∑–∏');
                    break;
                }
            } while (usedKanji.has(randomKanji.kanji) && attempts < maxAttempts);
            
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–∞–Ω–¥–∑–∏, –ø—Ä–µ—Ä—ã–≤–∞–µ–º
            if (usedKanji.has(randomKanji.kanji)) {
                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–æ–ª—å—à–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–¥–∑–∏ –¥–ª—è —Ç–µ—Å—Ç–∞');
                break;
            }
            
            usedKanji.add(randomKanji.kanji);

            // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞
            let questionType = this.testSettings.testType;
            if (questionType === 'mixed') {
                questionType = Math.random() < 0.5 ? 'meaning' : 'reading';
            }

            try {
                // –°–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
                const question = this.createQuestion(randomKanji, questionType, availableKanji);
                questions.push(question);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞:', error);
                break;
            }
        }

        console.log(`–°–æ–∑–¥–∞–Ω–æ ${questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞`);
        return questions;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —á—Ç–µ–Ω–∏–µ –∫–∞–Ω–¥–∑–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö)
     * @param {Object} kanji - –û–±—ä–µ–∫—Ç –∫–∞–Ω–¥–∑–∏
     * @returns {string} –ß—Ç–µ–Ω–∏–µ –∫–∞–Ω–¥–∑–∏
     */
    getKanjiReading(kanji) {
        if (!kanji.readings) {
            return '–ù–µ—Ç —á—Ç–µ–Ω–∏—è';
        }

        // –§–æ—Ä–º–∞—Ç 1: –æ–±—ä–µ–∫—Ç —Å on –∏ kun
        if (kanji.readings.on && kanji.readings.on.length > 0) {
            return kanji.readings.on[0];
        }
        if (kanji.readings.kun && kanji.readings.kun.length > 0) {
            return kanji.readings.kun[0];
        }

        // –§–æ—Ä–º–∞—Ç 2: –ø—Ä–æ—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        if (Array.isArray(kanji.readings) && kanji.readings.length > 0) {
            return kanji.readings[0];
        }

        return '–ù–µ—Ç —á—Ç–µ–Ω–∏—è';
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å
     * @param {Object} targetKanji - –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–¥–∑–∏
     * @param {string} questionType - –¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞
     * @param {Array} allKanji - –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–¥–∑–∏
     * @returns {Object} –û–±—ä–µ–∫—Ç –≤–æ–ø—Ä–æ—Å–∞
     */
    createQuestion(targetKanji, questionType, allKanji) {
        // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
        let correctAnswer;
        if (questionType === 'meaning') {
            correctAnswer = targetKanji.meaning;
        } else {
            // –î–ª—è —á—Ç–µ–Ω–∏–π - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö
            correctAnswer = this.getKanjiReading(targetKanji);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        if (!correctAnswer || correctAnswer === '–ù–µ—Ç —á—Ç–µ–Ω–∏—è') {
            console.warn('–ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∫–∞–Ω–¥–∑–∏:', targetKanji.kanji, correctAnswer);
        }

        const question = {
            kanji: targetKanji.kanji,
            type: questionType,
            correctAnswer: correctAnswer,
            options: [],
            correctIndex: -1
        };

        // –°–æ–∑–¥–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        const options = [question.correctAnswer];
        const usedAnswers = new Set([question.correctAnswer]);
        
        console.log(`–°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –¥–ª—è –∫–∞–Ω–¥–∑–∏ ${targetKanji.kanji} (${questionType}): ${correctAnswer}`);

        // –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        let attempts = 0;
        const maxAttempts = allKanji.length * 2; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        
        while (options.length < 4 && attempts < maxAttempts) {
            attempts++;
            const randomKanji = allKanji[Math.floor(Math.random() * allKanji.length)];
            let wrongAnswer;
            
            if (questionType === 'meaning') {
                wrongAnswer = randomKanji.meaning;
            } else {
                wrongAnswer = this.getKanjiReading(randomKanji);
            }

            if (!usedAnswers.has(wrongAnswer) && wrongAnswer) {
                options.push(wrongAnswer);
                usedAnswers.add(wrongAnswer);
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–ª—É—à–∫–∏
        while (options.length < 4) {
            const fakeAnswer = questionType === 'meaning' 
                ? `–í–∞—Ä–∏–∞–Ω—Ç ${options.length}` 
                : `„ÉÅ„ÉÜ„Ç≠„É≥„Ç∞${options.length}`;
            
            if (!usedAnswers.has(fakeAnswer)) {
                options.push(fakeAnswer);
                usedAnswers.add(fakeAnswer);
            } else {
                break; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –µ—â–µ –æ–¥–∏–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
            }
        }

        // –ü–µ—Ä–µ–º–µ—à–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã
        for (let i = options.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [options[i], options[j]] = [options[j], options[i]];
        }

        question.options = options;
        question.correctIndex = options.indexOf(question.correctAnswer);

        console.log(`–í–æ–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω:`, {
            kanji: question.kanji,
            type: question.type,
            correctAnswer: question.correctAnswer,
            options: question.options,
            correctIndex: question.correctIndex
        });

        return question;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
     */
    showQuestion() {
        if (this.currentQuestionIndex >= this.questions.length) {
            this.showResults();
            return;
        }

        const question = this.questions[this.currentQuestionIndex];
        console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å:', question);
        
        const questionContainer = document.getElementById('test-question');
        
        DOMHelpers.clear(questionContainer);

        // –ü—Ä–æ–≥—Ä–µ—Å—Å
        const progressDiv = DOMHelpers.createElement('div', 'test-progress');
        progressDiv.textContent = `–í–æ–ø—Ä–æ—Å ${this.currentQuestionIndex + 1} –∏–∑ ${this.questions.length}`;
        
        const progressBar = DOMHelpers.createElement('div', 'test-progress-bar');
        const progressFill = DOMHelpers.createElement('div', 'test-progress-fill');
        progressFill.style.width = `${(this.currentQuestionIndex / this.questions.length) * 100}%`;
        progressBar.appendChild(progressFill);

        // –ö–∞–Ω–¥–∑–∏
        const kanjiDiv = DOMHelpers.createElement('div', 'test-kanji', question.kanji);

        // –í–æ–ø—Ä–æ—Å
        const questionText = question.type === 'meaning' 
            ? '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –∫–∞–Ω–¥–∑–∏:'
            : '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –∫–∞–Ω–¥–∑–∏:';
        const questionDiv = DOMHelpers.createElement('div', 'test-question-text', questionText);

        // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        const optionsContainer = DOMHelpers.createElement('div', 'test-options');
        
        console.log('–°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:', question.options);
        
        if (question.options && question.options.length > 0) {
            question.options.forEach((option, index) => {
                const optionDiv = DOMHelpers.createElement('div', 'test-option');
                
                // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
                const numberSpan = DOMHelpers.createElement('span', 'option-number', `${index + 1}. `);
                const textSpan = DOMHelpers.createElement('span', 'option-text', option || '–í–∞—Ä–∏–∞–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
                
                optionDiv.appendChild(numberSpan);
                optionDiv.appendChild(textSpan);
                
                optionDiv.onclick = () => this.selectAnswer(index);
                optionDiv.setAttribute('data-index', index);
                
                optionsContainer.appendChild(optionDiv);
            });
        } else {
            console.error('–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:', question);
            const errorDiv = DOMHelpers.createElement('div', 'test-error', '–û—à–∏–±–∫–∞: –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            optionsContainer.appendChild(errorDiv);
        }

        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const controlsDiv = DOMHelpers.createElement('div', 'test-controls');
        const nextBtn = DOMHelpers.createElement('button', 'control-btn test-next-btn', '–°–ª–µ–¥—É—é—â–∏–π ‚Üí');
        nextBtn.onclick = () => this.nextQuestion();
        nextBtn.disabled = true;

        const endBtn = DOMHelpers.createElement('button', 'control-btn test-end-btn', '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç');
        endBtn.style.background = '#dc3545';
        endBtn.onclick = () => this.endTest();

        controlsDiv.appendChild(nextBtn);
        controlsDiv.appendChild(endBtn);

        // –ü–æ–¥—Å–∫–∞–∑–∫–∞
        const hintDiv = DOMHelpers.createElement('div', 'test-hint', 
            'üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏—à–∏ 1-4 –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞, Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è');

        questionContainer.appendChild(progressDiv);
        questionContainer.appendChild(progressBar);
        questionContainer.appendChild(kanjiDiv);
        questionContainer.appendChild(questionDiv);
        questionContainer.appendChild(optionsContainer);
        questionContainer.appendChild(controlsDiv);
        questionContainer.appendChild(hintDiv);
    }

    /**
     * –í—ã–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç
     * @param {number} optionIndex - –ò–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
     */
    selectAnswer(optionIndex) {
        const options = document.querySelectorAll('.test-option');
        const nextBtn = document.querySelector('.test-next-btn');
        
        // –£–±—Ä–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã–±–æ—Ä—ã
        options.forEach(option => {
            option.classList.remove('selected');
        });

        // –í—ã–¥–µ–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        if (options[optionIndex]) {
            options[optionIndex].classList.add('selected');
        }

        // –í–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∏–π"
        if (nextBtn) {
            nextBtn.disabled = false;
        }

        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç
        this.answers[this.currentQuestionIndex] = optionIndex;
    }

    /**
     * –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
     */
    nextQuestion() {
        if (this.answers[this.currentQuestionIndex] === undefined) {
            NotificationHelpers.show('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç', 'warning');
            return;
        }

        this.currentQuestionIndex++;
        
        if (this.currentQuestionIndex >= this.questions.length) {
            this.showResults();
        } else {
            this.showQuestion();
        }
    }

    /**
     * –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç –¥–æ—Å—Ä–æ—á–Ω–æ
     */
    endTest() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç?')) {
            this.showResults();
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
     */
    showResults() {
        const endTime = Date.now();
        const duration = Math.round((endTime - this.currentTest.startTime) / 1000);

        // –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        let correctAnswers = 0;
        const detailedResults = [];

        for (let i = 0; i < this.currentQuestionIndex; i++) {
            const question = this.questions[i];
            const userAnswer = this.answers[i];
            const isCorrect = userAnswer === question.correctIndex;
            
            if (isCorrect) {
                correctAnswers++;
            }

            detailedResults.push({
                question: question,
                userAnswer: userAnswer,
                isCorrect: isCorrect
            });
        }

        const percentage = Math.round((correctAnswers / this.currentQuestionIndex) * 100);

        // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        this.renderResults({
            totalQuestions: this.currentQuestionIndex,
            correctAnswers: correctAnswers,
            percentage: percentage,
            duration: duration,
            detailedResults: detailedResults
        });

        // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        document.getElementById('test-question').style.display = 'none';
        document.getElementById('test-results').style.display = 'block';

        this.currentTest = null;
    }

    /**
     * –û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
     * @param {Object} results - –û–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
     */
    renderResults(results) {
        const resultsContainer = document.getElementById('test-results');
        DOMHelpers.clear(resultsContainer);

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        const titleDiv = DOMHelpers.createElement('div', 'test-results-title');
        const title = DOMHelpers.createElement('h2', '', 'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞');
        titleDiv.appendChild(title);

        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const statsDiv = DOMHelpers.createElement('div', 'test-stats');
        
        const scoreDiv = DOMHelpers.createElement('div', 'test-score', `${results.percentage}%`);
        const detailsDiv = DOMHelpers.createElement('div', 'test-details');
        detailsDiv.innerHTML = `
            <p><strong>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</strong> ${results.correctAnswers} –∏–∑ ${results.totalQuestions}</p>
            <p><strong>–í—Ä–µ–º—è:</strong> ${Math.floor(results.duration / 60)}:${String(results.duration % 60).padStart(2, '0')}</p>
        `;

        // –û—Ü–µ–Ω–∫–∞
        let grade = '';
        if (results.percentage >= 90) grade = 'üèÜ –û—Ç–ª–∏—á–Ω–æ!';
        else if (results.percentage >= 75) grade = 'ü•à –•–æ—Ä–æ—à–æ!';
        else if (results.percentage >= 60) grade = 'ü•â –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ';
        else grade = 'üìö –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏';

        const gradeDiv = DOMHelpers.createElement('div', 'test-grade', grade);

        statsDiv.appendChild(scoreDiv);
        statsDiv.appendChild(detailsDiv);
        statsDiv.appendChild(gradeDiv);

        // –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const detailsContainer = DOMHelpers.createElement('div', 'test-detailed-results');
        const detailsTitle = DOMHelpers.createElement('h3', '', '–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
        detailsContainer.appendChild(detailsTitle);

        results.detailedResults.forEach((result, index) => {
            const resultItem = DOMHelpers.createElement('div', 
                `test-result-item ${result.isCorrect ? 'correct' : 'incorrect'}`);
            
            const kanji = result.question.kanji;
            const correctAnswer = result.question.correctAnswer;
            const userAnswerText = result.userAnswer !== undefined 
                ? result.question.options[result.userAnswer] 
                : '–ù–µ –æ—Ç–≤–µ—á–µ–Ω–æ';

            resultItem.innerHTML = `
                <div class="result-kanji">${kanji}</div>
                <div class="result-details">
                    <div class="result-status">${result.isCorrect ? '‚úÖ' : '‚ùå'}</div>
                    <div class="result-answers">
                        <div class="correct-answer">–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${correctAnswer}</div>
                        ${!result.isCorrect ? `<div class="user-answer">–í–∞—à –æ—Ç–≤–µ—Ç: ${userAnswerText}</div>` : ''}
                    </div>
                </div>
            `;

            detailsContainer.appendChild(resultItem);
        });

        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        const actionsDiv = DOMHelpers.createElement('div', 'test-actions');
        
        const newTestBtn = DOMHelpers.createElement('button', 'control-btn', 'üîÑ –ù–æ–≤—ã–π —Ç–µ—Å—Ç');
        newTestBtn.onclick = () => this.resetTest();

        const reviewBtn = DOMHelpers.createElement('button', 'control-btn', 'üìö –ò–∑—É—á–∏—Ç—å –æ—à–∏–±–∫–∏');
        reviewBtn.onclick = () => this.reviewMistakes(results.detailedResults);

        actionsDiv.appendChild(newTestBtn);
        actionsDiv.appendChild(reviewBtn);

        // –°–æ–±—Ä–∞—Ç—å –≤—Å–µ –≤–º–µ—Å—Ç–µ
        resultsContainer.appendChild(titleDiv);
        resultsContainer.appendChild(statsDiv);
        resultsContainer.appendChild(detailsContainer);
        resultsContainer.appendChild(actionsDiv);
    }

    /**
     * –°–±—Ä–æ—Å–∏—Ç—å —Ç–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
     */
    resetTest() {
        this.currentTest = null;
        this.currentQuestionIndex = 0;
        this.questions = [];
        this.answers = [];

        document.getElementById('test-settings').style.display = 'block';
        document.getElementById('test-question').style.display = 'none';
        document.getElementById('test-results').style.display = 'none';

        NotificationHelpers.show('–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É —Ç–µ—Å—Ç—É', 'success');
    }

    /**
     * –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—à–∏–±–∫–∏ –≤ —Ñ–ª—ç—à-–∫–∞—Ä—Ç–∞—Ö
     * @param {Array} detailedResults - –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
     */
    reviewMistakes(detailedResults) {
        const mistakes = detailedResults.filter(result => !result.isCorrect);
        
        if (mistakes.length === 0) {
            NotificationHelpers.show('–£ –≤–∞—Å –Ω–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è!', 'success');
            return;
        }

        // –ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ –æ—à–∏–±–æ—á–Ω–æ–≥–æ –∫–∞–Ω–¥–∑–∏
        const firstMistake = mistakes[0];
        const allKanji = this.app.api.getAllKanji();
        const kanjiIndex = allKanji.findIndex(k => k.kanji === firstMistake.question.kanji);

        if (kanjiIndex !== -1 && this.app.flashcards) {
            this.app.flashcards.setCurrentIndex(kanjiIndex);
            this.app.navigation.navigateTo('flashcards');
            NotificationHelpers.show(`–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∏–∑—É—á–µ–Ω–∏—é –æ—à–∏–±–æ–∫. –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: ${mistakes.length}`, 'info');
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ—Å—Ç–æ–≤
     * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    getTestStatistics() {
        return {
            currentTest: this.currentTest,
            currentQuestionIndex: this.currentQuestionIndex,
            totalQuestions: this.questions.length,
            settings: this.testSettings
        };
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = KanjiTest;
} else {
    window.KanjiTest = KanjiTest;
}